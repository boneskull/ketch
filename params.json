{"name":"ketch","tagline":"Ketch helps you execute, one way or another","body":"ketch\r\n===\r\n\r\nUse this module to easily build commands for passing to [child_process](http://nodejs.org/api/child_process.html) functions.\r\nLeverages [q](http://npmjs.org/q) for Promise implementation.\r\n\r\nWhen called as a function, this module will return a new `Ketch` instance.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install ketch\r\n```\r\n\r\n## Tests\r\n\r\n```\r\nnpm test\r\n```\r\n\r\n\r\n\r\n**Example:**\r\n```js\r\nvar ketch = require('ketch');\r\n\r\n// what branch am I on?\r\nketch('git')\r\n  .prepend('/usr/bin/env')\r\n  .push('symbolic-ref')\r\n  .opt('quiet', 'short')\r\n  .push('HEAD')\r\n  .exec()\r\n  // returns stdout, stderr as array\r\n  .done(function(output) {\r\n     console.log(output[0].trim());\r\n  }, function(err) {\r\n     throw err;\r\n  });\r\n\r\n// use a callback instead\r\nketch('git')\r\n  .prepend('/usr/bin/env')\r\n  .push('symbolic-ref')\r\n  .opt('quiet', 'short')\r\n  .push('HEAD')\r\n  .exec(function(err, stdout, stderr) {\r\n    if (err) {\r\n      throw err;\r\n    }\r\n    console.log(stdout.trim());\r\n  });\r\n```\r\n  \r\n---\r\n\r\nClass: Ketch\r\n===\r\nProvides chainable functions to easily build and execute a command.\r\n\r\n**last_err**: `String` , Last error, if present\r\n**last_stdout**: `String` , Last stdout value, if present\r\n**last_stderr**: `String` , Last stderr value, if present\r\n**last_exec_cmd**: `String` , Last command run with `child_process.exec()`\r\n**last_execFile_cmd**: `String` , Last command run with `child_process.execFile()`\r\n**last_fork_cmd**: `String` , Last command run with `child_process.fork()`\r\n**last_spawn_cmd**: `String` , Last command run with `child_process.spawn()`\r\n**cmd**: `Array` , Internal array representation of this command.\r\nketch.Ketch.parseArgs() \r\n-----------------------------\r\nParse function arguments into an array.  `arguments` may be one of:\r\n\r\n- an array\r\n- a space-separated string\r\n- one or more strings (*not* separated by space)\r\n\r\n**Returns**: `Array`, Command as an array\r\n\r\nketch.Ketch.append() \r\n-----------------------------\r\nAppend an argument to this command.  *Alias: `push()`*\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\nketch.Ketch.prepend() \r\n-----------------------------\r\nPrepend an argument to this command.  *Alias: `unshift()`*\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\nketch.Ketch.opt() \r\n-----------------------------\r\nSugar function to append one or more options to the command.\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\n**Example**:\r\n```js\r\nketch('git').opt('q', 'short') // becomes \"git -q --short\"\r\n```\r\n  \r\nketch.Ketch.toString() \r\n-----------------------------\r\nReturns current command as a space-separated string.\r\n\r\n**Returns**: `String`, String representation of this command\r\n\r\nketch.Ketch.pop() \r\n-----------------------------\r\nPops the last argument off of the command.  Does not return it.  If you need that, use `ketch('foo').cmd.pop()`\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\nketch.Ketch.shift() \r\n-----------------------------\r\nShifts the first argument off of the command.  Does not return it.  If you need that, use `ketch('foo').cmd.shift()`\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\nketch.Ketch.splice() \r\n-----------------------------\r\nSplice the command.\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\nketch.Ketch.serialize() \r\n-----------------------------\r\n\"Serialize\" this command into command/arguments array format, suitable for passing to `execFile` or `fork`.  *Alias: `get()`*\r\n\r\n**Returns**: `Array`, Array where first item is a string, second is array of commands\r\n\r\nketch.Ketch.exec(options, callback) \r\n-----------------------------\r\nWrapper around `child_process.exec()`.  Returns a promise, or\r\n\r\n**Parameters**\r\n\r\n**options**: `Object`, Options for `child_process.exec()`\r\n\r\n**callback**: `function`, If present, will execute as NodeJS-style callback; otherwise will return a Promise.\r\n\r\n**Returns**: `ChildProcess | Promise`, `ChildProcess` instance if `callback` is specified, otherwise a `Promise`.\r\n\r\nketch.Ketch.execFile(options, callback) \r\n-----------------------------\r\nWrapper around `child_process.execFile()`.  Returns a promise, or\r\n\r\n**Parameters**\r\n\r\n**options**: `Object`, Options for `child_process.execFile()`\r\n\r\n**callback**: `function`, If present, will execute as NodeJS-style callback; otherwise will return a Promise.\r\n\r\n**Returns**: `ChildProcess | Promise`, `ChildProcess` instance if `callback` is specified, otherwise a `Promise`.\r\n\r\nketch.Ketch.fork(options, callback) \r\n-----------------------------\r\nWrapper around `child_process.fork()`.  Returns a promise, or\r\n\r\n**Parameters**\r\n\r\n**options**: `Object`, Options for `child_process.fork()`\r\n\r\n**callback**: `function`, If present, will execute as NodeJS-style callback; otherwise will return a Promise.\r\n\r\n**Returns**: `ChildProcess | Promise`, `ChildProcess` instance if `callback` is specified, otherwise a `Promise`.\r\n\r\nketch.Ketch.spawn(options, callback) \r\n-----------------------------\r\nWrapper around `child_process.spawn()`.  Returns a promise, or\r\n\r\n**Parameters**\r\n\r\n**options**: `Object`, Options for `child_process.spawn()`\r\n\r\n**callback**: `function`, If present, will execute as NodeJS-style callback; otherwise will return a Promise.\r\n\r\n**Returns**: `ChildProcess | Promise`, `ChildProcess` instance if `callback` is specified, otherwise a `Promise`.\r\n\r\nketch.Ketch._exec(fn_name, args, options, callback) \r\n-----------------------------\r\nInternal function to call `child_process` functions.\r\n\r\n**Parameters**\r\n\r\n**fn_name**: `String`, One of `exec`, `execFile`, `fork` or `spawn`\r\n\r\n**args**: `Array`, Arguments to `child_process` function\r\n\r\n**options**: `Object`, Options for `child_process` function\r\n\r\n**callback**: `function`, Optional callback\r\n\r\n**Returns**: `ChildProcess | Promise`, `ChildProcess` instance if `callback` is specified, otherwise a `Promise`.\r\n\r\nketch.Ketch.clear() \r\n-----------------------------\r\nObliterates the current command.  *Alias: `reset()`*\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\nketch.Ketch.debug() \r\n-----------------------------\r\nDebugging function to log the current command to console.  Chainable, for your pleasure.\r\n\r\n**Returns**: `Ketch`, Ketch instance\r\n\r\n\r\n\r\n\r\n---\r\n\r\n*Copyright 2014, Christopher Hiller*\r\n\r\n**Author:** [Christopher Hiller](http:&#x2F;&#x2F;boneskull.github.io)\r\n\r\n**License:** MIT \r\n\r\n**Overview:** *Ketch helps you execute, one way or another.*\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}